@page "/timeline"

<div class="w-full p-5 overflow-x-auto h-[50vh]">
    <div class="flex flex-nowrap border-b-2 border-gray-300 mb-5">
        @foreach (var day in Days)
        {
            <div class="text-center text-sm flex-none w-20">
                @day.ToString("MM/dd")
            </div>
        }
    </div>
    <div class="relative" style="min-width: @GetTimelineWidth()px;">
        @foreach (var task in Tasks)
        {
            <div class="absolute h-8 text-white text-center rounded-lg flex items-center justify-center"
                 style="left:@CalculateLeft(task.StartDate)px; width:@CalculateWidth(task.StartDate, task.EndDate)px; background-color: @task.Color;">
                @task.Name
            </div>
        }
    </div>
</div>

@code {
    private List<Task> Tasks = new()
    {
        new Task { Name = "Task 1", StartDate = DateTime.Today.AddDays(-2), EndDate = DateTime.Today.AddDays(3), Color = "#3490dc" },
        new Task { Name = "Task 2", StartDate = DateTime.Today.AddDays(3), EndDate = DateTime.Today.AddDays(10), Color = "#f56565" },
        new Task { Name = "Task 3", StartDate = DateTime.Today.AddDays(30), EndDate = DateTime.Today.AddDays(40), Color = "#48bb78" },
        // Add more tasks as needed
    };

    private DateTime MinDate => Tasks.Min(t => t.StartDate);
    private DateTime MaxDate => Tasks.Max(t => t.EndDate);

    private List<DateTime> Days => Enumerable.Range(0, (MaxDate - MinDate).Days + 1)
        .Select(offset => MinDate.AddDays(offset))
        .ToList();

    private double CalculateLeft(DateTime startDate)
    {
        // Calcula o deslocamento da tarefa no eixo X baseado no intervalo total de dias
        double totalDays = (MaxDate - MinDate).Days;
        double startDays = (startDate - MinDate).Days;
        return (startDays / totalDays) * GetTimelineWidth();
    }

    private double CalculateWidth(DateTime startDate, DateTime endDate)
    {
        // Calcula a largura da tarefa com base no intervalo de dias
        double totalDays = (MaxDate - MinDate).Days;
        double duration = (endDate - startDate).Days;
        return (duration / totalDays) * GetTimelineWidth();
    }

    private double GetTimelineWidth()
    {
        // Calcula a largura total do eixo X baseado no número de dias
        return (MaxDate - MinDate).Days * 40;  // 40px por dia, ajuste conforme necessário
    }

    private class Task
    {
        public string Name { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Color { get; set; }
    }
}
