@page "/Obras"

<PageTitle>Obras</PageTitle>

<div class="flex lg:flex-row md:flex-col items-start mt-12 md:mx-10 mx-24">
    <EditForm Model="this" OnValidSubmit="CadastrarObra" FormName="obraForm" class="flex flex-col w-full items-center">
        <p class="lg:text-3xl md:text-4xl text-slate-200 mb-10 mt-12">Cadastrar uma Obra:</p>
        
        <label class="input input-bordered flex bg-neutral items-center gap-2 lg:w-1/2 md:w-full lg:h-16 md:h-24 lg:text-lg md:text-3xl mb-10 text-slate-100">
            Nome da Obra:
            <input @bind-value="_nome" type="text" class="grow text-slate-300 lg:text-lg md:text-3xl" minlength="3" maxlength="100" placeholder="Tal tal" required/>
            <ValidationMessage For="@(() => _nome)"/>
        </label>

        <div class="flex flex-row lg:w-1/2 md:w-full gap-x-5 justify-between">
            <div class="flex flex-col lg:w-full md:w-full">
                <label for="date" class="block ml-4 lg:text-lg md:text-3xl mb-2 text-slate-100">Data Final da Entrega:</label>
                <input @bind-value="_data" type="date" id="date" name="date" required class="input input-bordered flex bg-neutral items-center lg:h-16 md:h-24 lg:text-lg md:text-3xl mb-10 text-slate-100 cursor-text" onfocus="this.showPicker()">
            </div>

            <div class="flex flex-col lg:w-1/4 md:w-full">
                <label for="color" class="block ml-4 lg:text-lg md:text-3xl mb-2 text-slate-100">Escolha uma cor:</label>
                <input @bind-value="_cor" type="color" id="color" name="color" required class="input w-full input-bordered flex bg-neutral items-center lg:h-16 md:h-24 lg:text-lg md:text-3xl mb-10 text-slate-100 cursor-pointer">
            </div>
        </div>

        <p class="lg:text-3xl md:text-4xl text-slate-200 mb-10 mt-5">Duração das Etapas (em dias):</p>

        <label class="input input-bordered flex bg-neutral items-center gap-2 lg:w-1/2 md:w-full lg:h-16 md:h-24 lg:text-lg md:text-3xl mb-10 text-slate-100">
            Projeto:
            <input @bind-value="_projeto" type="number" class="grow text-slate-300 lg:text-lg md:text-3xl" min="0" placeholder="Ex. 30 dias" required/>
        </label>

        <label class="input input-bordered flex bg-neutral items-center gap-2 lg:w-1/2 md:w-full lg:h-16 md:h-24 lg:text-lg md:text-3xl mb-10 text-slate-100">
            Formas:
            <input @bind-value="_formas" type="number" class="grow text-slate-300 lg:text-lg md:text-3xl" min="0" placeholder="Ex. 15 dias" required/>
        </label>

        <label class="input input-bordered flex bg-neutral items-center gap-2 lg:w-1/2 md:w-full lg:h-16 md:h-24 lg:text-lg md:text-3xl mb-10 text-slate-100">
            Concretagem:
            <input @bind-value="_concretagem" type="number" class="grow text-slate-300 lg:text-lg md:text-3xl" min="0" placeholder="Ex. 15 dias" required/>
        </label>

        <label class="input input-bordered flex bg-neutral items-center gap-2 lg:w-1/2 md:w-full lg:h-16 md:h-24 lg:text-lg md:text-3xl mb-10 text-slate-100">
            Transporte:
            <input @bind-value="_transporte" type="number" class="grow text-slate-300 lg:text-lg md:text-3xl" min="0" placeholder="Ex. 7 dias" required/>
        </label>

        <label class="input input-bordered flex bg-neutral items-center gap-2 lg:w-1/2 md:w-full lg:h-16 md:h-24 lg:text-lg md:text-3xl mb-10 text-slate-100">
            Montagem:
            <input @bind-value="_montagem" type="number" class="grow text-slate-300 lg:text-lg md:text-3xl" min="0" placeholder="Ex. 20 dias" required/>
        </label>

        <button type="submit" disabled="@_submitDisabled" class="btn btn-outline lg:w-1/4 md:w-full lg:h-16 md:h-24 lg:text-lg md:text-3xl md:mb-24 lg:mt-5 md:mt-5">CADASTRAR</button>
    </EditForm>
</div>

@if (_toastVisible){
    <div class="toast toast-center toast-middle ">
        <div class="alert alert-info bg-neutral border-neutral w-fit lg:h-1/6 md:h-1/6">
            <p class="text-slate-200 lg:text-3xl md:text-5xl text-justify leading-loose hyphens-auto" lang="pt-BR">@_message!</p>
        </div>
    </div>
}

@if (_submitLoad){
    <div class="toast toast-center toast-middle">
        <div class="bg-slate-800 p-5 rounded-xl w-fit lg:h-1/6 md:h-1/6 flex flex-col justify-center items-center">
            <p class="text-slate-300 lg:text-3xl md:text-5xl text-justify leading-loose hyphens-auto mb-4" lang="pt-BR">Aguarde a conclusão do cadastro...</p>
            <span class="loading loading-ring w-40 self-center justify-self-center text-green-600"></span>
        </div>
    </div>
}

@code {
    private string _nome = string.Empty;
    private DateTime _data = DateTime.Today;
    private string _cor = "#000000";
    private string _projeto = string.Empty;
    private string _formas = string.Empty;
    private string _concretagem = string.Empty;
    private string _transporte = string.Empty;
    private string _montagem = string.Empty;

    private string _message = "Falha ao cadastrar";
    private bool _toastVisible;
    private bool _submitDisabled;
    private bool _submitLoad;
    
    private async Task CadastrarObra()
    {
        try
        {
            if (string.IsNullOrEmpty(_cor))
            {
                _cor = "#000000";
            }
            
            _submitDisabled = true;
            _submitLoad = true;
            
            _data = _data.Date.ToUniversalTime();

            var novaObra = new
            {
                name = _nome,
                deadline = _data,
                color = _cor,
                project = _projeto,
                mold = _formas,
                concreting = _concretagem,
                transport = _transporte,
                mounting = _montagem
            };

            var client = new HttpClient();
            var response = await client.PostAsJsonAsync("https://construct-planner.onrender.com/api/Obras/criar", novaObra);
            
            _message = response.IsSuccessStatusCode ? "Obra cadastrada com sucesso" : "Falha ao cadastrar a obra";
        }
        catch (Exception ex)
        {
            _message = $"Erro: {ex.Message}";
        }
        finally
        {
            await MostrarToast();
        }
    }


    private async Task MostrarToast()
    {
        _submitDisabled = false;
        _submitLoad = false;
        _nome = string.Empty;
    
        _toastVisible = true;
        StateHasChanged();
        
        await Task.Delay(3500);
        
        _toastVisible = false;
        StateHasChanged();
    }
}